failed AVER: (NOT (CTRAN-NEXT CTRAN))
This is probably a bug in SBCL itself. (Alternatively, SBCL
might have been corrupted by bad user code, e.g. by an undefined
Lisp operation like (FMAKUNBOUND 'COMPILE), or by stray pointers
from alien code or from unsafe Lisp code; or there might be a
bug in the OS or hardware that SBCL is running on.) If it seems
to be a bug in SBCL itself, the maintainers would like to know
about it. Bug reports are welcome on the SBCL mailing lists,
which you can find at <http://sbcl.sourceforge.net/>.
   [Condition of type SB-INT:BUG]

Restarts:
 0: [ABORT] Abort compilation.
 1: [*ABORT] Return to SLIME's top level.
 2: [ABORT] abort thread (#<THREAD tid=3856199 "worker" RUNNING {101FD161F3}>)

Backtrace:
  0: (SB-C::LINK-NODE-TO-PREVIOUS-CTRAN #<SB-C::REF  :LEAF #<SB-C::GLOBAL-VAR :%SOURCE-NAME ERROR :TYPE #1=#<SB-KERNEL:FUN-TYPE (FUNCTION # NIL)> :DEFINED-TYPE #1# :WHERE-FROM :DECLARED :KIND :GLOBAL-FUNCT..
      Locals:
        CTRAN = #<SB-C::CTRAN 1 {1020D8F4E3}>
        NODE = #<SB-C::REF  :LEAF #<SB-C::GLOBAL-VAR :%SOURCE-NAME ERROR :TYPE # :DEFINED-TYPE # :WHERE-FROM :DECLARED :KIND :GLOBAL-FUNCTION {1020ED0BF3}> {1020ED0CD3}>
  1: (SB-C::REFERENCE-LEAF #<SB-C::CTRAN 1 {1020D8F4E3}> #<SB-C::CTRAN 2 {1020ED0C53}> #<SB-C::LVAR 3 {1020ED0C83}> #<SB-C::GLOBAL-VAR :%SOURCE-NAME ERROR :TYPE #1=#<SB-KERNEL:FUN-TYPE (FUNCTION (# &REST T..
      Locals:
        LEAF = #<SB-C::GLOBAL-VAR :%SOURCE-NAME ERROR :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION # NIL)> :DEFINED-TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION # NIL)> :WHERE-FROM :DECLARED :KIND :GLOBAL-FUNCTION {1020ED0BF3}>
        NAME = SB-C::.ANONYMOUS.
        NEXT = #<SB-C::CTRAN 2 {1020ED0C53}>
        REF = #<SB-C::REF  :LEAF #<SB-C::GLOBAL-VAR :%SOURCE-NAME ERROR :TYPE # :DEFINED-TYPE # :WHERE-FROM :DECLARED :KIND :GLOBAL-FUNCTION {1020ED0BF3}> {1020ED0CD3}>
        RESULT = #<SB-C::LVAR 3 {1020ED0C83}>
        START = #<SB-C::CTRAN 1 {1020D8F4E3}>
        TYPE = NIL
  2: (SB-C::IR1-CONVERT-COMBINATION #<SB-C::CTRAN 1 {1020D8F4E3}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (ERROR (QUOTE SB-INT:COMPILED-PROGRAM-ERROR) :MESSAGE "Required argument is not ..
      Locals:
        SB-C::CTRAN = #<SB-C::CTRAN 2 {1020ED0C53}>
        SB-KERNEL:FORM = (ERROR 'SB-INT:COMPILED-PROGRAM-ERROR :MESSAGE "Required argument is not a symbol: (ITERATOR NESTED-VECTOR-ITERATOR)" :SOURCE "(CURRENT-DEPTH-DONE-P ITERATOR)")
        SB-C::FUN = #<SB-C::GLOBAL-VAR :%SOURCE-NAME ERROR :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION # NIL)> :DEFINED-TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION # NIL)> :WHERE-FROM :DECLARED :KIND :GLOBAL-FUNCTION {1020ED0BF3}>
        SB-C::FUN-LVAR = #<SB-C::LVAR 3 {1020ED0C83}>
        SB-C::NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        SB-C::RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        SB-C::START = #<SB-C::CTRAN 1 {1020D8F4E3}>
  3: (SB-C::IR1-CONVERT-COMBINATION-CHECKING-TYPE #<SB-C::CTRAN 1 {1020D8F4E3}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (ERROR (QUOTE SB-INT:COMPILED-PROGRAM-ERROR) :MESSAGE "Required ar..
      Locals:
        FORM = (ERROR 'SB-INT:COMPILED-PROGRAM-ERROR :MESSAGE "Required argument is not a symbol: (ITERATOR NESTED-VECTOR-ITERATOR)" :SOURCE "(CURRENT-DEPTH-DONE-P ITERATOR)")
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 1 {1020D8F4E3}>
        VAR = #<SB-C::GLOBAL-VAR :%SOURCE-NAME ERROR :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION # NIL)> :DEFINED-TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION # NIL)> :WHERE-FROM :DECLARED :KIND :GLOBAL-FUNCTION {1020ED0BF3}>
  4: (SB-C::IR1-CONVERT #<SB-C::CTRAN 1 {1020D8F4E3}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (ERROR (QUOTE SB-INT:COMPILED-PROGRAM-ERROR) :MESSAGE "Required argument is not a symbol: (I..
      Locals:
        FORM = (ERROR 'SB-INT:COMPILED-PROGRAM-ERROR :MESSAGE "Required argument is not a symbol: (ITERATOR NESTED-VECTOR-ITERATOR)" :SOURCE "(CURRENT-DEPTH-DONE-P ITERATOR)")
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 1 {1020D8F4E3}>
        START#2 = #<SB-C::CTRAN 1 {1020D8F4E3}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
  5: (SB-C::IR1-CONVERT #<SB-C::CTRAN 1 {1020D8F4E3}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (CURRENT-DEPTH-DONE-P ITERATOR))
      Locals:
        FORM = (CURRENT-DEPTH-DONE-P ITERATOR)
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 1 {1020D8F4E3}>
        START#2 = #<SB-C::CTRAN 1 {1020D8F4E3}>
  6: (SB-C::IR1-CONVERT-IF #<SB-C::CTRAN 6 {1020D8F263}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (IF (ZEROP (DEPTH ITERATOR)) (CURRENT-DEPTH-DONE-P ITERATOR)))
      Locals:
        ELSE-CTRAN = #<SB-C::CTRAN 35 {1020D8F5B3}>
        #:FORM = (IF (ZEROP (DEPTH ITERATOR)) ..)
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 6 {1020D8F263}>
        TEST = (ZEROP (DEPTH ITERATOR))
  7: (SB-C::IR1-CONVERT #<SB-C::CTRAN 6 {1020D8F263}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (IF (ZEROP (DEPTH ITERATOR)) (CURRENT-DEPTH-DONE-P ITERATOR)))
      Locals:
        FORM = (IF (ZEROP (DEPTH ITERATOR)) ..)
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 6 {1020D8F263}>
        START#2 = #<SB-C::CTRAN 6 {1020D8F263}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
  8: (SB-C::IR1-CONVERT-COMMON-FUNCTOID #<SB-C::CTRAN 6 {1020D8F263}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (AND (ZEROP (DEPTH ITERATOR)) (CURRENT-DEPTH-DONE-P ITERATOR)) AND)
      Locals:
        FORM = (AND (ZEROP (DEPTH ITERATOR)) (CURRENT-DEPTH-DONE-P ITERATOR))
        FUN = AND
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        OP = AND
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 6 {1020D8F263}>
        START#1 = #<SB-C::CTRAN 6 {1020D8F263}>
  9: (SB-C::IR1-CONVERT #<SB-C::CTRAN 6 {1020D8F263}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (AND (ZEROP (DEPTH ITERATOR)) (CURRENT-DEPTH-DONE-P ITERATOR)))
      Locals:
        FORM = (AND (ZEROP (DEPTH ITERATOR)) (CURRENT-DEPTH-DONE-P ITERATOR))
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 6 {1020D8F263}>
        START#2 = #<SB-C::CTRAN 6 {1020D8F263}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 10: (SB-C::IR1-CONVERT-PROGN-BODY #<SB-C::CTRAN 6 {1020D8F263}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> ((AND (ZEROP #) (CURRENT-DEPTH-DONE-P ITERATOR))))
      Locals:
        BODY = ((AND (ZEROP (DEPTH ITERATOR)) (CURRENT-DEPTH-DONE-P ITERATOR)))
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 6 {1020D8F263}>
 11: (SB-C::IR1-CONVERT-BLOCK #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (BLOCK DONEP (AND (ZEROP #) (CURRENT-DEPTH-DONE-P ITERATOR))))
      Locals:
        #:FORM = (BLOCK DONEP (AND (ZEROP (DEPTH ITERATOR)) (CURRENT-DEPTH-DONE-P ITERATOR)))
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
 12: (SB-C::IR1-CONVERT #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (BLOCK DONEP (AND (ZEROP #) (CURRENT-DEPTH-DONE-P ITERATOR))))
      Locals:
        FORM = (BLOCK DONEP (AND (ZEROP (DEPTH ITERATOR)) (CURRENT-DEPTH-DONE-P ITERATOR)))
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
        START#2 = #<SB-C::CTRAN 7 {1020D8ED03}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 13: (SB-C::IR1-CONVERT-PROGN-BODY #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> ((BLOCK DONEP (AND # #))))
      Locals:
        BODY = ((BLOCK DONEP (AND (ZEROP #) (CURRENT-DEPTH-DONE-P ITERATOR))))
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
 14: (SB-C::IR1-TRANSLATE-LOCALLY ((DECLARE (SB-EXT:ENABLE-PACKAGE-LOCKS SB-PCL::%PARAMETER-BINDING-MODIFIED)) (BLOCK DONEP (AND # #))) #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::L..
      Locals:
        BODY = ((DECLARE (SB-EXT:ENABLE-PACKAGE-LOCKS SB-PCL::%PARAMETER-BINDING-MODIFIED)) (BLOCK DONEP (AND (ZEROP #) (CURRENT-DEPTH-DONE-P ITERATOR))))
        FUNS = NIL
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
        VARS = ((SB-PCL::%PARAMETER-BINDING-MODIFIED SB-SYS:MACRO QUOTE))
 15: (SB-C::%FUNCALL-IN-FOOMACROLET-LEXENV #<FUNCTION (LAMBDA (SB-C::DEFINITION) :IN SB-C::SYMBOL-MACROLET-DEFINITIONIZE-FUN) {1020D8F02B}> :VARS ((SB-PCL::%PARAMETER-BINDING-MODIFIED (QUOTE))) #<FUNCTION ..
      Locals:
        DEFINITIONIZE-KEYWORD = :VARS
        DEFINITIONS = ((SB-PCL::%PARAMETER-BINDING-MODIFIED (QUOTE)))
        #:G = #<FUNCTION (LAMBDA (SB-C::DEFINITION) :IN SB-C::SYMBOL-MACROLET-DEFINITIONIZE-FUN) {1020D8F02B}>
        THING = #<FUNCTION (LAMBDA (&OPTIONAL SB-C::VARS) :IN SB-C::IR1-CONVERT-SYMBOL-MACROLET) {1020D8EFFB}>
 16: (SB-C::IR1-CONVERT-SYMBOL-MACROLET #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (SYMBOL-MACROLET ((SB-PCL::%PARAMETER-BINDING-MODIFIED #)) (DECLARE (SB-EXT:..
      Locals:
        #:FORM = (SYMBOL-MACROLET ((SB-PCL::%PARAMETER-BINDING-MODIFIED (QUOTE))) ..)
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
 17: (SB-C::IR1-CONVERT #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (SYMBOL-MACROLET ((SB-PCL::%PARAMETER-BINDING-MODIFIED #)) (DECLARE (SB-EXT:ENABLE-PACKAGE-L..
      Locals:
        FORM = (SYMBOL-MACROLET ((SB-PCL::%PARAMETER-BINDING-MODIFIED (QUOTE))) ..)
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
        START#2 = #<SB-C::CTRAN 7 {1020D8ED03}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 18: (SB-C::IR1-CONVERT-PROGN-BODY #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> ((SYMBOL-MACROLET (#) (DECLARE #) (BLOCK DONEP #))))
      Locals:
        BODY = ((SYMBOL-MACROLET ((SB-PCL::%PARAMETER-BINDING-MODIFIED #)) ..))
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
 19: (SB-C::IR1-TRANSLATE-LOCALLY ((DECLARE (SB-EXT:DISABLE-PACKAGE-LOCKS SB-PCL::%PARAMETER-BINDING-MODIFIED)) (SYMBOL-MACROLET (#) (DECLARE #) (BLOCK DONEP #))) #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRA..
      Locals:
        BODY = ((DECLARE (SB-EXT:DISABLE-PACKAGE-LOCKS SB-PCL::%PARAMETER-BINDING-MODIFIED)) ..)
        FUNS = NIL
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
        VARS = NIL
 20: (SB-C::IR1-CONVERT-LOCALLY #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (LOCALLY (DECLARE (SB-EXT:DISABLE-PACKAGE-LOCKS SB-PCL::%PARAMETER-BINDING-MODIFIED)..
      Locals:
        #:FORM = (LOCALLY ..)
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
 21: (SB-C::IR1-CONVERT #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> (LOCALLY (DECLARE (SB-EXT:DISABLE-PACKAGE-LOCKS SB-PCL::%PARAMETER-BINDING-MODIFIED)) (SYMBO..
      Locals:
        FORM = (LOCALLY ..)
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
        START#2 = #<SB-C::CTRAN 7 {1020D8ED03}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 22: (SB-C::IR1-CONVERT-PROGN-BODY #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> ((LOCALLY (DECLARE #) (SYMBOL-MACROLET # # #))))
      Locals:
        BODY = ((LOCALLY ..))
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
 23: (SB-C::IR1-CONVERT-AUX-BINDINGS #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> ((LOCALLY (DECLARE #) (SYMBOL-MACROLET # # #))) NIL NIL NIL :VALUE-SOURCE-FORMS..
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        AUX-VALS = NIL
        AUX-VARS = NIL
        BODY = ((LOCALLY ..))
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        POST-BINDING-LEXENV = NIL
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
 24: (SB-C::IR1-CONVERT-SPECIAL-BINDINGS #<SB-C::CTRAN 7 {1020D8ED03}> #<SB-C::CTRAN 4 {1020D8EAB3}> #<SB-C::LVAR 5 {1020D8EAE3}> ((LOCALLY (DECLARE #) (SYMBOL-MACROLET # # #))) NIL NIL NIL NIL :VALUE-SOUR..
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        AUX-VALS = NIL
        AUX-VARS = NIL
        BODY = ((LOCALLY ..))
        NEXT = #<SB-C::CTRAN 4 {1020D8EAB3}>
        POST-BINDING-LEXENV = NIL
        RESULT = #<SB-C::LVAR 5 {1020D8EAE3}>
        START = #<SB-C::CTRAN 7 {1020D8ED03}>
        SVARS = NIL
 25: (SB-C::IR1-CONVERT-LAMBDA-BODY ((LOCALLY (DECLARE #) (SYMBOL-MACROLET # # #))) (#<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.DUMMY0. {1020D8E0E3}>) :AUX-VARS NIL :AUX-VALS NIL :SOURCE-NAME SB-C::.ANONYMO..
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        #:.DEFAULTING-TEMP.#1 = NIL
        BIND = #<SB-KERNEL:BIND :LAMBDA #<SB-C::CLAMBDA :%SOURCE-NAME SB-C::.ANONYMOUS. :%DEBUG-NAME # :KIND # :TYPE # :WHERE-FROM :DEFINED :VARS # {1020D8E983}>>
        DEBUG-NAME = (SB-C::&AUX-BINDINGS (SB-PCL::.DUMMY0.))
        #:G = ((LOCALLY ..))
        #:G#1 = NIL
        #:G#2 = NIL
        LAMBDA = #<SB-C::CLAMBDA ..>
        LOCAL-POLICY = NIL
        NOTE-LEXICAL-BINDINGS = T
        SOURCE-NAME = SB-C::.ANONYMOUS.
        VARS = (#<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.DUMMY0. {1020D8E0E3}>)
 26: (SB-C::IR1-CONVERT-AUX-BINDINGS #<SB-C::CTRAN 8 {1020D8E7C3}> #<SB-C::CTRAN 9 {1020D8E573}> #<SB-C::LVAR 10 {1020D8E5A3}> ((LOCALLY (DECLARE #) (SYMBOL-MACROLET # # #))) (#<SB-C::LAMBDA-VAR :%SOURCE-N..
      Locals:
        #:.DEFAULTING-TEMP. = ((SB-PCL::.DUMMY0.))
        AUX-VALS = (NIL)
        AUX-VARS = (#<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.DUMMY0. {1020D8E0E3}>)
        BODY = ((LOCALLY ..))
        NEXT = #<SB-C::CTRAN 9 {1020D8E573}>
        POST-BINDING-LEXENV = NIL
        RESULT = #<SB-C::LVAR 10 {1020D8E5A3}>
        START = #<SB-C::CTRAN 8 {1020D8E7C3}>
 27: (SB-C::IR1-CONVERT-SPECIAL-BINDINGS #<SB-C::CTRAN 8 {1020D8E7C3}> #<SB-C::CTRAN 9 {1020D8E573}> #<SB-C::LVAR 10 {1020D8E5A3}> ((LOCALLY (DECLARE #) (SYMBOL-MACROLET # # #))) (#<SB-C::LAMBDA-VAR :%SOUR..
      Locals:
        #:.DEFAULTING-TEMP. = ((SB-PCL::.DUMMY0.))
        AUX-VALS = (NIL)
        AUX-VARS = (#<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.DUMMY0. {1020D8E0E3}>)
        BODY = ((LOCALLY ..))
        NEXT = #<SB-C::CTRAN 9 {1020D8E573}>
        POST-BINDING-LEXENV = NIL
        RESULT = #<SB-C::LVAR 10 {1020D8E5A3}>
        START = #<SB-C::CTRAN 8 {1020D8E7C3}>
        SVARS = NIL
 28: (SB-C::IR1-CONVERT-LAMBDA-BODY ((LOCALLY (DECLARE #) (SYMBOL-MACROLET # # #))) (#<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.ARGS-TAIL. {1020D8DFE3}>) :AUX-VARS (#<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::..
      Locals:
        #:.DEFAULTING-TEMP. = (#<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.DUMMY0. {1020D8E0E3}>)
        #:.DEFAULTING-TEMP.#1 = (NIL)
        BIND = #<SB-KERNEL:BIND :LAMBDA #<SB-C::CLAMBDA :%SOURCE-NAME SB-C::.ANONYMOUS. :%DEBUG-NAME # :KIND # :TYPE # :WHERE-FROM :DEFINED :VARS # {1020D8E443}>>
        DEBUG-NAME = (SB-C::&AUX-BINDINGS (SB-PCL::.ARGS-TAIL. SB-PCL::.DUMMY0.))
        #:G = ((LOCALLY ..))
        #:G#1 = NIL
        #:G#2 = ((SB-PCL::.DUMMY0.))
        LAMBDA = #<SB-C::CLAMBDA ..>
        LOCAL-POLICY = NIL
        NOTE-LEXICAL-BINDINGS = T
        SOURCE-NAME = SB-C::.ANONYMOUS.
        VARS = (#<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.ARGS-TAIL. {1020D8DFE3}>)
 29: (SB-C::IR1-CONVERT-AUX-BINDINGS #<SB-C::CTRAN 11 {1020D8D393}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> ((LOCALLY (DECLARE #) (SYMBOL-MACROLET # # #))) (#<SB-C::LAMBDA-VAR :%SOURCE..
      Locals:
        #:.DEFAULTING-TEMP. = ((SB-PCL::.ARGS-TAIL. NIL) (SB-PCL::.DUMMY0.))
        AUX-VALS = (NIL NIL)
        AUX-VARS = (#<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.ARGS-TAIL. {1020D8DFE3}> #<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.DUMMY0. {1020D8E0E3}>)
        BODY = ((LOCALLY ..))
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        POST-BINDING-LEXENV = NIL
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 11 {1020D8D393}>
 30: (SB-C::IR1-CONVERT-LET* #<SB-C::CTRAN 11 {1020D8D393}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (LET* ((SB-PCL::.ARGS-TAIL. NIL) (SB-PCL::.DUMMY0.)) (DECLARE (IGNORABLE SB-PCL::.AR..
      Locals:
        #:FORM = (LET* ((SB-PCL::.ARGS-TAIL. NIL) (SB-PCL::.DUMMY0.)) ..)
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 11 {1020D8D393}>
 31: (SB-C::IR1-CONVERT #<SB-C::CTRAN 11 {1020D8D393}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (LET* ((SB-PCL::.ARGS-TAIL. NIL) (SB-PCL::.DUMMY0.)) (DECLARE (IGNORABLE SB-PCL::.ARGS-TA..
      Locals:
        FORM = (LET* ((SB-PCL::.ARGS-TAIL. NIL) (SB-PCL::.DUMMY0.)) ..)
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 11 {1020D8D393}>
        START#2 = #<SB-C::CTRAN 11 {1020D8D393}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 32: (SB-C::IR1-CONVERT-COMMON-FUNCTOID #<SB-C::CTRAN 11 {1020D8D393}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (SB-PCL::BIND-ARGS (NIL NIL) (DECLARE (SB-PCL::%CLASS ITERATOR NESTED-VEC..
      Locals:
        FORM = (SB-PCL::BIND-ARGS (NIL NIL) ..)
        FUN = SB-PCL::BIND-ARGS
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        OP = SB-PCL::BIND-ARGS
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 11 {1020D8D393}>
        START#1 = #<SB-C::CTRAN 11 {1020D8D393}>
 33: (SB-C::IR1-CONVERT #<SB-C::CTRAN 11 {1020D8D393}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (SB-PCL::BIND-ARGS (NIL NIL) (DECLARE (SB-PCL::%CLASS ITERATOR NESTED-VECTOR-ITERATOR)) (..
      Locals:
        FORM = (SB-PCL::BIND-ARGS (NIL NIL) ..)
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 11 {1020D8D393}>
        START#2 = #<SB-C::CTRAN 11 {1020D8D393}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 34: (SB-C::IR1-CONVERT-PROGN-BODY #<SB-C::CTRAN 11 {1020D8D393}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> ((SB-PCL::BIND-ARGS (NIL NIL) (DECLARE #) (LOCALLY # #))))
      Locals:
        BODY = ((SB-PCL::BIND-ARGS (NIL NIL) ..))
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 11 {1020D8D393}>
 35: (SB-C::IR1-CONVERT-FLET #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (FLET ((NEXT-METHOD-P NIL # #)) (DECLARE (IGNORABLE #)) (SB-PCL::BIND-ARGS (NIL NIL)..
      Locals:
        #:FORM = (FLET ((NEXT-METHOD-P () ..)))
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
 36: (SB-C::IR1-CONVERT #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (FLET ((NEXT-METHOD-P NIL # #)) (DECLARE (IGNORABLE #)) (SB-PCL::BIND-ARGS (NIL NIL) (DEC..
      Locals:
        FORM = (FLET ((NEXT-METHOD-P () ..)))
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
        START#2 = #<SB-C::CTRAN 14 {1020D89ED3}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 37: (SB-C::IR1-CONVERT-COMMON-FUNCTOID #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (SB-PCL::BIND-FAST-LEXICAL-METHOD-FUNCTIONS ((ITERATOR) NIL SB-PCL::.NEXT..
      Locals:
        FORM = (SB-PCL::BIND-FAST-LEXICAL-METHOD-FUNCTIONS ((ITERATOR) NIL SB-PCL::.NEXT-METHOD-CALL. (:CALL-NEXT-METHOD-P NIL :SETQ-P NIL :PARAMETERS-SETQD NIL ...)) ..)
        FUN = SB-PCL::BIND-FAST-LEXICAL-METHOD-FUNCTIONS
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        OP = SB-PCL::BIND-FAST-LEXICAL-METHOD-FUNCTIONS
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
        START#1 = #<SB-C::CTRAN 14 {1020D89ED3}>
 38: (SB-C::IR1-CONVERT #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (SB-PCL::BIND-FAST-LEXICAL-METHOD-FUNCTIONS ((ITERATOR) NIL SB-PCL::.NEXT-METHOD-CALL. (:..
      Locals:
        FORM = (SB-PCL::BIND-FAST-LEXICAL-METHOD-FUNCTIONS ((ITERATOR) NIL SB-PCL::.NEXT-METHOD-CALL. (:CALL-NEXT-METHOD-P NIL :SETQ-P NIL :PARAMETERS-SETQD NIL ...)) ..)
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
        START#2 = #<SB-C::CTRAN 14 {1020D89ED3}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 39: (SB-C::IR1-CONVERT-COMMON-FUNCTOID #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((ITERATOR) SB-PCL::.NEXT-METHOD-C..
      Locals:
        FORM = (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((ITERATOR) SB-PCL::.NEXT-METHOD-CALL. (ITERATOR) NIL :CALL-NEXT-METHOD-P NIL ...) ..)
        FUN = SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        OP = SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
        START#1 = #<SB-C::CTRAN 14 {1020D89ED3}>
 40: (SB-C::IR1-CONVERT #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((ITERATOR) SB-PCL::.NEXT-METHOD-CALL. (ITERATOR) ..
      Locals:
        FORM = (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((ITERATOR) SB-PCL::.NEXT-METHOD-CALL. (ITERATOR) NIL :CALL-NEXT-METHOD-P NIL ...) ..)
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
        START#2 = #<SB-C::CTRAN 14 {1020D89ED3}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 41: (SB-C::IR1-CONVERT-PROGN-BODY #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> ((SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (# SB-PCL::.NEXT-METHOD-CALL. # NIL :C..
      Locals:
        BODY = ((SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((ITERATOR) SB-PCL::.NEXT-METHOD-CALL. (ITERATOR) NIL :CALL-NEXT-METHOD-P NIL ...) ..))
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
 42: (SB-C::IR1-TRANSLATE-LOCALLY ((SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (# SB-PCL::.NEXT-METHOD-CALL. # NIL :CALL-NEXT-METHOD-P NIL ...) (DECLARE #) (LOCALLY # #))) #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C:..
      Locals:
        BODY = ((SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((ITERATOR) SB-PCL::.NEXT-METHOD-CALL. (ITERATOR) NIL :CALL-NEXT-METHOD-P NIL ...) ..))
        FUNS = NIL
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
        VARS = ((SB-PCL::PV-ENV-ENVIRONMENT SB-SYS:MACRO . SB-PCL::DEFAULT))
 43: (SB-C::%FUNCALL-IN-FOOMACROLET-LEXENV #<FUNCTION (LAMBDA (SB-C::DEFINITION) :IN SB-C::SYMBOL-MACROLET-DEFINITIONIZE-FUN) {1020D8A22B}> :VARS ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT)) #<FUNCTION (..
      Locals:
        DEFINITIONIZE-KEYWORD = :VARS
        DEFINITIONS = ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
        #:G = #<FUNCTION (LAMBDA (SB-C::DEFINITION) :IN SB-C::SYMBOL-MACROLET-DEFINITIONIZE-FUN) {1020D8A22B}>
        THING = #<FUNCTION (LAMBDA (&OPTIONAL SB-C::VARS) :IN SB-C::IR1-CONVERT-SYMBOL-MACROLET) {1020D8A1FB}>
 44: (SB-C::IR1-CONVERT-SYMBOL-MACROLET #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT)) (SB-PCL::..
      Locals:
        #:FORM = (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT)) ..)
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
 45: (SB-C::IR1-CONVERT #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT)) (SB-PCL::FAST-LEXICAL-MET..
      Locals:
        FORM = (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT)) ..)
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
        START#2 = #<SB-C::CTRAN 14 {1020D89ED3}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 46: (SB-C::IR1-CONVERT-PROGN-BODY #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> ((SYMBOL-MACROLET (#) (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS # # #))))
      Locals:
        BODY = ((SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT)) ..))
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
 47: (SB-C::IR1-CONVERT-PROGN #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (PROGN (SYMBOL-MACROLET (#) (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS # # #))))
      Locals:
        #:FORM = (PROGN ..)
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
 48: (SB-C::IR1-CONVERT #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 12 {1020D8A023}> #<SB-C::LVAR 13 {1020D8A083}> (PROGN (SYMBOL-MACROLET (#) (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS # # #))))
      Locals:
        FORM = (PROGN ..)
        NEXT = #<SB-C::CTRAN 12 {1020D8A023}>
        RESULT = #<SB-C::LVAR 13 {1020D8A083}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
        START#2 = #<SB-C::CTRAN 14 {1020D89ED3}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 49: (SB-C::IR1-CONVERT-MULTIPLE-VALUE-PROG1 #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 15 {1020D89C83}> #<SB-C::LVAR 16 {1020D89CB3}> (MULTIPLE-VALUE-PROG1 (PROGN (SYMBOL-MACROLET # #)) (VALUES)))
      Locals:
        DELAY = #<SB-INT:DELAY :%TYPE-CHECK NIL :VALUE #<SB-C::LVAR 13 {1020D8A083}> :ASSERTED-TYPE #<SB-KERNEL:NAMED-TYPE *> :TYPE-TO-CHECK #<SB-KERNEL:NAMED-TYPE *> {1020D8A0D3}>
        #:FORM = (MULTIPLE-VALUE-PROG1 ..)
        FORMS-CTRAN = #<SB-C::CTRAN 36 {1020D8A053}>
        LVAR = #<SB-C::LVAR 16 {1020D89CB3}>
        NEXT = #<SB-C::CTRAN 15 {1020D89C83}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
        VALUE-CTRAN = #<SB-C::CTRAN 12 {1020D8A023}>
 50: (SB-C::IR1-CONVERT #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 15 {1020D89C83}> #<SB-C::LVAR 16 {1020D89CB3}> (MULTIPLE-VALUE-PROG1 (PROGN (SYMBOL-MACROLET # #)) (VALUES)))
      Locals:
        FORM = (MULTIPLE-VALUE-PROG1 ..)
        NEXT = #<SB-C::CTRAN 15 {1020D89C83}>
        RESULT = #<SB-C::LVAR 16 {1020D89CB3}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
        START#2 = #<SB-C::CTRAN 14 {1020D89ED3}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 51: (SB-C::IR1-CONVERT-PROGN-BODY #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 15 {1020D89C83}> #<SB-C::LVAR 16 {1020D89CB3}> ((MULTIPLE-VALUE-PROG1 (PROGN #) (VALUES))))
      Locals:
        BODY = ((MULTIPLE-VALUE-PROG1 ..))
        NEXT = #<SB-C::CTRAN 15 {1020D89C83}>
        RESULT = #<SB-C::LVAR 16 {1020D89CB3}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
 52: (SB-C::IR1-CONVERT-AUX-BINDINGS #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 15 {1020D89C83}> #<SB-C::LVAR 16 {1020D89CB3}> ((MULTIPLE-VALUE-PROG1 (PROGN #) (VALUES))) NIL NIL NIL :VALUE-SOURCE-FORMS ..
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        AUX-VALS = NIL
        AUX-VARS = NIL
        BODY = ((MULTIPLE-VALUE-PROG1 ..))
        NEXT = #<SB-C::CTRAN 15 {1020D89C83}>
        POST-BINDING-LEXENV = NIL
        RESULT = #<SB-C::LVAR 16 {1020D89CB3}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
 53: (SB-C::IR1-CONVERT-SPECIAL-BINDINGS #<SB-C::CTRAN 14 {1020D89ED3}> #<SB-C::CTRAN 15 {1020D89C83}> #<SB-C::LVAR 16 {1020D89CB3}> ((MULTIPLE-VALUE-PROG1 (PROGN #) (VALUES))) NIL NIL NIL NIL :VALUE-SOURC..
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        AUX-VALS = NIL
        AUX-VARS = NIL
        BODY = ((MULTIPLE-VALUE-PROG1 ..))
        NEXT = #<SB-C::CTRAN 15 {1020D89C83}>
        POST-BINDING-LEXENV = NIL
        RESULT = #<SB-C::LVAR 16 {1020D89CB3}>
        START = #<SB-C::CTRAN 14 {1020D89ED3}>
        SVARS = NIL
 54: (SB-C::IR1-CONVERT-LAMBDA-BODY ((MULTIPLE-VALUE-PROG1 (PROGN #) (VALUES))) (#<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.PV. {1020D89433}> #<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.NEXT-METHOD-CALL. {102..
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        #:.DEFAULTING-TEMP.#1 = NIL
        BIND = #<SB-KERNEL:BIND :LAMBDA #<SB-C::CLAMBDA :%SOURCE-NAME # :%DEBUG-NAME NIL :KIND # :TYPE # :WHERE-FROM :DEFINED :VARS # {1020D89B53}>>
        DEBUG-NAME = NIL
        #:G = ((MULTIPLE-VALUE-PROG1 ..))
        #:G#1 = NIL
        #:G#2 = NIL
        LAMBDA = #<SB-C::CLAMBDA ..>
        LOCAL-POLICY = NIL
        NOTE-LEXICAL-BINDINGS = T
        SOURCE-NAME = (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR))
        VARS = (#<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.PV. {1020D89433}> #<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::.NEXT-METHOD-CALL. {1020D894F3}> #<SB-C::LAMBDA-VAR :%SOURCE-NAME ITERATOR {1020D895B3}>)
 55: (SB-C::IR1-CONVERT-LAMBDA (LAMBDA (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. ITERATOR) (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.) (SB-EXT:DISABLE-PACKAGE-LOCKS SB-PCL::PV-ENV-ENVIRONME..
      Locals:
        #:.DEFAULTING-TEMP. = (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR))
        #:.DEFAULTING-TEMP.#1 = NIL
        DEBUG-NAME#1 = NIL
        EXPLICIT-CHECK = NIL
        FORM = (LAMBDA (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. ITERATOR) ..)
        LAMBDA-LIST = :UNSPECIFIED
        MAYBE-ADD-DEBUG-CATCH = T
        SOURCE-FORM = (LAMBDA (ITERATOR) (AND (ZEROP (DEPTH ITERATOR)) (CURRENT-DEPTH-DONE-P ITERATOR)))
 56: (SB-C::IR1-CONVERT-LAMBDA-FOR-DEFUN (LAMBDA (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. ITERATOR) (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.) (SB-EXT:DISABLE-PACKAGE-LOCKS SB-PCL::PV-ENV..
      Locals:
        LAMBDA = (LAMBDA (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. ITERATOR) ..)
        NAME = (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR))
        SIMPLE-LEXENV-P = T
        VAR = #<SB-C::DEFINED-FUN :%SOURCE-NAME (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR)) :INLINEP NIL :SAME-BLOCK-P T {1020D89213}>
 57: (SB-C::IR1-CONVERT-LAMBDALIKE (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP #1=(NESTED-VECTOR-ITERATOR)) (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. ITERATOR) (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::...
      Locals:
        #:.DEFAULTING-TEMP. = SB-C::.ANONYMOUS.
        #:.DEFAULTING-TEMP.#1 = (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR))
        LAMBDA-EXPRESSION = (LAMBDA (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. ITERATOR) ..)
        SIMPLE-LEXENV-P = T
        THING = (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR)) ..)
        VAR = #<SB-C::DEFINED-FUN :%SOURCE-NAME (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR)) :INLINEP NIL :SAME-BLOCK-P T {1020D89213}>
 58: (SB-C::FIND-OR-CONVERT-FUN-LEAF (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP #1=(NESTED-VECTOR-ITERATOR)) (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. ITERATOR) (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL:..
      Locals:
        START = #<SB-C::CTRAN 17 {1020D855A3}>
        THING = (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR)) ..)
 59: (SB-C::IR1-CONVERT-FUNCTION #<SB-C::CTRAN 17 {1020D855A3}> #<SB-C::CTRAN 18 {1020D88443}> #<SB-C::LVAR 19 {1020D88473}> (FUNCTION (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP #) (SB-PCL::.PV. SB-PC..
      Locals:
        #:FORM = #'(SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR)) ..)
        NEXT = #<SB-C::CTRAN 18 {1020D88443}>
        RESULT = #<SB-C::LVAR 19 {1020D88473}>
        START = #<SB-C::CTRAN 17 {1020D855A3}>
 60: (SB-C::IR1-CONVERT #<SB-C::CTRAN 17 {1020D855A3}> #<SB-C::CTRAN 18 {1020D88443}> #<SB-C::LVAR 19 {1020D88473}> (FUNCTION (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP #) (SB-PCL::.PV. SB-PCL::.NEXT-..
      Locals:
        FORM = #'(SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR)) ..)
        NEXT = #<SB-C::CTRAN 18 {1020D88443}>
        RESULT = #<SB-C::LVAR 19 {1020D88473}>
        START = #<SB-C::CTRAN 17 {1020D855A3}>
        START#2 = #<SB-C::CTRAN 17 {1020D855A3}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 61: (SB-C::IR1-CONVERT-COMMON-FUNCTOID #<SB-C::CTRAN 17 {1020D855A3}> #<SB-C::CTRAN 18 {1020D88443}> #<SB-C::LVAR 19 {1020D88473}> (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP #1=(NESTED-VECTOR-ITERATO..
      Locals:
        FORM = (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR)) ..)
        FUN = SB-INT:NAMED-LAMBDA
        NEXT = #<SB-C::CTRAN 18 {1020D88443}>
        OP = SB-INT:NAMED-LAMBDA
        RESULT = #<SB-C::LVAR 19 {1020D88473}>
        START = #<SB-C::CTRAN 17 {1020D855A3}>
        START#1 = #<SB-C::CTRAN 17 {1020D855A3}>
 62: (SB-C::IR1-CONVERT #<SB-C::CTRAN 17 {1020D855A3}> #<SB-C::CTRAN 18 {1020D88443}> #<SB-C::LVAR 19 {1020D88473}> (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP #1=(NESTED-VECTOR-ITERATOR)) (SB-PCL::.PV..
      Locals:
        FORM = (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR)) ..)
        NEXT = #<SB-C::CTRAN 18 {1020D88443}>
        RESULT = #<SB-C::LVAR 19 {1020D88473}>
        START = #<SB-C::CTRAN 17 {1020D855A3}>
        START#2 = #<SB-C::CTRAN 17 {1020D855A3}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 63: (SB-C::IR1-CONVERT-COMBINATION-ARGS #<SB-C::LVAR 20 {1020D855D3}> #<SB-C::CTRAN 17 {1020D855A3}> #<SB-C::CTRAN 21 {1020D85243}> #<SB-C::LVAR 22 {1020D85273}> ((SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD..
      Locals:
        #:.DEFAULTING-TEMP. = ((SB-PCL::FMF ..))
        ARG-SOURCE-FORMS = NIL
        ARGS = ((SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR)) ..))
        FORMS = ((SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR)) ..))
        FUN-LVAR = #<SB-C::LVAR 20 {1020D855D3}>
        LVAR = #<SB-C::LVAR 22 {1020D85273}>
        NEXT = #<SB-C::CTRAN 21 {1020D85243}>
        NODE = #<SB-C::COMBINATION :FUN #<SB-C::REF  :LEAF # {1020D88323}> :ARGS NIL {1020D88393}>
        PASS-NARGS = T
        START = #<SB-C::CTRAN 17 {1020D855A3}>
 64: (SB-C::IR1-CONVERT-AUX-BINDINGS #<SB-C::CTRAN 23 {1020D850F3}> #<SB-C::CTRAN 21 {1020D85243}> #<SB-C::LVAR 22 {1020D85273}> ((SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN . #1=#) (SB-PCL::METHOD-FUNCTION..
      Locals:
        #:.DEFAULTING-TEMP. = ((SB-PCL::FMF ..))
        AUX-VALS = ((SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD DONEP (NESTED-VECTOR-ITERATOR)) ..))
        AUX-VARS = (#<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::FMF {1020D85353}> #<SB-C::LAMBDA-VAR :%SOURCE-NAME SB-PCL::MF {1020D85453}>)
        BODY = ((SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF) (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF '#)) SB-PCL::MF)
        NEXT = #<SB-C::CTRAN 21 {1020D85243}>
        POST-BINDING-LEXENV = NIL
        RESULT = #<SB-C::LVAR 22 {1020D85273}>
        START = #<SB-C::CTRAN 23 {1020D850F3}>
 65: (SB-C::IR1-CONVERT-LET* #<SB-C::CTRAN 23 {1020D850F3}> #<SB-C::CTRAN 21 {1020D85243}> #<SB-C::LVAR 22 {1020D85273}> (LET* ((SB-PCL::FMF #) (SB-PCL::MF #)) (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN . ..
      Locals:
        #:FORM = (LET* ((SB-PCL::FMF ..)))
        NEXT = #<SB-C::CTRAN 21 {1020D85243}>
        RESULT = #<SB-C::LVAR 22 {1020D85273}>
        START = #<SB-C::CTRAN 23 {1020D850F3}>
 66: (SB-C::IR1-CONVERT #<SB-C::CTRAN 23 {1020D850F3}> #<SB-C::CTRAN 21 {1020D85243}> #<SB-C::LVAR 22 {1020D85273}> (LET* ((SB-PCL::FMF #) (SB-PCL::MF #)) (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN . #1=#)..
      Locals:
        FORM = (LET* ((SB-PCL::FMF ..)))
        NEXT = #<SB-C::CTRAN 21 {1020D85243}>
        RESULT = #<SB-C::LVAR 22 {1020D85273}>
        START = #<SB-C::CTRAN 23 {1020D850F3}>
        START#2 = #<SB-C::CTRAN 23 {1020D850F3}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 67: (SB-C::IR1-CONVERT-COMBINATION-ARGS #<SB-C::LVAR 24 {1020D84F83}> #<SB-C::CTRAN 25 {1020D84F53}> #<SB-C::CTRAN 26 {1020D84E73}> #<SB-C::LVAR 27 {1020D84EA3}> (:FUNCTION (LET* (# #) (SETF # #) SB-PCL::..
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        ARG-SOURCE-FORMS = NIL
        ARGS = (:FUNCTION ..)
        FORMS = ((LET* ((SB-PCL::FMF #) (SB-PCL::MF #)) ..))
        FUN-LVAR = #<SB-C::LVAR 24 {1020D84F83}>
        LVAR = #<SB-C::LVAR 27 {1020D84EA3}>
        NEXT = #<SB-C::CTRAN 26 {1020D84E73}>
        NODE = #<SB-C::COMBINATION :FUN #<SB-C::REF  :LEAF # {1020D84FD3}> :ARGS NIL {1020D85043}>
        PASS-NARGS = T
        START = #<SB-C::CTRAN 25 {1020D84F53}>
 68: (SB-C::IR1-CONVERT-COMBINATION #<SB-C::CTRAN 28 {1020D84D03}> #<SB-C::CTRAN 26 {1020D84E73}> #<SB-C::LVAR 27 {1020D84EA3}> (LIST* :FUNCTION (LET* (# #) (SETF # #) SB-PCL::MF) (QUOTE (SB-PCL::PLIST # S..
      Locals:
        SB-KERNEL:FORM = (LIST* :FUNCTION ..)
        SB-C::FUN = #<SB-C::GLOBAL-VAR :%SOURCE-NAME LIST* :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION # #)> :DEFINED-TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION # #)> :WHERE-FROM :DECLARED :KIND :GLOBAL-FUNCTION {1020D84EF3}>
        SB-C::NEXT = #<SB-C::CTRAN 26 {1020D84E73}>
        SB-C::RESULT = #<SB-C::LVAR 27 {1020D84EA3}>
        SB-C::START = #<SB-C::CTRAN 28 {1020D84D03}>
 69: (SB-C::IR1-CONVERT-COMBINATION-CHECKING-TYPE #<SB-C::CTRAN 28 {1020D84D03}> #<SB-C::CTRAN 26 {1020D84E73}> #<SB-C::LVAR 27 {1020D84EA3}> (LIST* :FUNCTION (LET* (# #) (SETF # #) SB-PCL::MF) (QUOTE (SB-..
      Locals:
        FORM = (LIST* :FUNCTION ..)
        NEXT = #<SB-C::CTRAN 26 {1020D84E73}>
        RESULT = #<SB-C::LVAR 27 {1020D84EA3}>
        START = #<SB-C::CTRAN 28 {1020D84D03}>
        VAR = #<SB-C::GLOBAL-VAR :%SOURCE-NAME LIST* :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION # #)> :DEFINED-TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION # #)> :WHERE-FROM :DECLARED :KIND :GLOBAL-FUNCTION {1020D84EF3}>
 70: (SB-C::IR1-CONVERT #<SB-C::CTRAN 28 {1020D84D03}> #<SB-C::CTRAN 26 {1020D84E73}> #<SB-C::LVAR 27 {1020D84EA3}> (LIST* :FUNCTION (LET* (# #) (SETF # #) SB-PCL::MF) (QUOTE (SB-PCL::PLIST # SB-PCL::SIMPL..
      Locals:
        FORM = (LIST* :FUNCTION ..)
        NEXT = #<SB-C::CTRAN 26 {1020D84E73}>
        RESULT = #<SB-C::LVAR 27 {1020D84EA3}>
        START = #<SB-C::CTRAN 28 {1020D84D03}>
        START#2 = #<SB-C::CTRAN 28 {1020D84D03}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 71: (SB-C::IR1-CONVERT-COMBINATION-ARGS #<SB-C::LVAR 29 {1020D80D83}> #<SB-C::CTRAN 30 {1020D80D53}> #<SB-C::CTRAN 31 {1020D80C63}> NIL ((QUOTE STANDARD-METHOD) (QUOTE DONEP) (QUOTE NIL) (LIST (FIND-CLASS..
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        ARG-SOURCE-FORMS = NIL
        ARGS = ('STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ..)
        FORMS = ((LIST* :FUNCTION ..))
        FUN-LVAR = #<SB-C::LVAR 29 {1020D80D83}>
        LVAR = NIL
        NEXT = #<SB-C::CTRAN 31 {1020D80C63}>
        NODE = #<SB-C::COMBINATION :FUN #<SB-C::REF  :LEAF # {1020D80DD3}> :ARGS NIL {1020D80E43}>
        PASS-NARGS = T
        START = #<SB-C::CTRAN 30 {1020D80D53}>
 72: (SB-C::IR1-CONVERT-COMBINATION #<SB-C::CTRAN 32 {1020D80B13}> #<SB-C::CTRAN 31 {1020D80C63}> NIL (SB-PCL::LOAD-DEFMETHOD (QUOTE STANDARD-METHOD) (QUOTE DONEP) (QUOTE NIL) (LIST (FIND-CLASS #)) (QUOTE ..
      Locals:
        SB-KERNEL:FORM = (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...)
        SB-C::FUN = #<SB-C::GLOBAL-VAR ..>
        SB-C::NEXT = #<SB-C::CTRAN 31 {1020D80C63}>
        SB-C::RESULT = NIL
        SB-C::START = #<SB-C::CTRAN 32 {1020D80B13}>
 73: (SB-C::IR1-CONVERT-COMBINATION-CHECKING-TYPE #<SB-C::CTRAN 32 {1020D80B13}> #<SB-C::CTRAN 31 {1020D80C63}> NIL (SB-PCL::LOAD-DEFMETHOD (QUOTE STANDARD-METHOD) (QUOTE DONEP) (QUOTE NIL) (LIST (FIND-CLA..
      Locals:
        FORM = (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...)
        NEXT = #<SB-C::CTRAN 31 {1020D80C63}>
        RESULT = NIL
        START = #<SB-C::CTRAN 32 {1020D80B13}>
        VAR = #<SB-C::GLOBAL-VAR ..>
 74: (SB-C::IR1-CONVERT #<SB-C::CTRAN 32 {1020D80B13}> #<SB-C::CTRAN 31 {1020D80C63}> NIL (SB-PCL::LOAD-DEFMETHOD (QUOTE STANDARD-METHOD) (QUOTE DONEP) (QUOTE NIL) (LIST (FIND-CLASS #)) (QUOTE (ITERATOR)) ..
      Locals:
        FORM = (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...)
        NEXT = #<SB-C::CTRAN 31 {1020D80C63}>
        RESULT = NIL
        START = #<SB-C::CTRAN 32 {1020D80B13}>
        START#2 = #<SB-C::CTRAN 32 {1020D80B13}>
      Catch-tags:
        SB-C::IR1-ERROR-ABORT
 75: (SB-C::IR1-CONVERT-PROGN-BODY #<SB-C::CTRAN 32 {1020D80B13}> #<SB-C::CTRAN 33 {1020D808C3}> #<SB-C::LVAR 34 {1020D808F3}> ((SB-PCL::LOAD-DEFMETHOD (QUOTE STANDARD-METHOD) (QUOTE DONEP) (QUOTE NIL) (LI..
      Locals:
        BODY = ((SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...) NIL)
        FORMS = ((SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...) NIL)
        NEXT = #<SB-C::CTRAN 33 {1020D808C3}>
        RESULT = #<SB-C::LVAR 34 {1020D808F3}>
        START = #<SB-C::CTRAN 32 {1020D80B13}>
 76: (SB-C::IR1-CONVERT-AUX-BINDINGS #<SB-C::CTRAN 32 {1020D80B13}> #<SB-C::CTRAN 33 {1020D808C3}> #<SB-C::LVAR 34 {1020D808F3}> ((SB-PCL::LOAD-DEFMETHOD (QUOTE STANDARD-METHOD) (QUOTE DONEP) (QUOTE NIL) (..
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        AUX-VALS = NIL
        AUX-VARS = NIL
        BODY = ((SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...) NIL)
        NEXT = #<SB-C::CTRAN 33 {1020D808C3}>
        POST-BINDING-LEXENV = NIL
        RESULT = #<SB-C::LVAR 34 {1020D808F3}>
        START = #<SB-C::CTRAN 32 {1020D80B13}>
 77: (SB-C::IR1-CONVERT-SPECIAL-BINDINGS #<SB-C::CTRAN 32 {1020D80B13}> #<SB-C::CTRAN 33 {1020D808C3}> #<SB-C::LVAR 34 {1020D808F3}> ((SB-PCL::LOAD-DEFMETHOD (QUOTE STANDARD-METHOD) (QUOTE DONEP) (QUOTE NI..
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        AUX-VALS = NIL
        AUX-VARS = NIL
        BODY = ((SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...) NIL)
        NEXT = #<SB-C::CTRAN 33 {1020D808C3}>
        POST-BINDING-LEXENV = NIL
        RESULT = #<SB-C::LVAR 34 {1020D808F3}>
        START = #<SB-C::CTRAN 32 {1020D80B13}>
        SVARS = NIL
 78: (SB-C::IR1-CONVERT-LAMBDA-BODY ((SB-PCL::LOAD-DEFMETHOD (QUOTE STANDARD-METHOD) (QUOTE DONEP) (QUOTE NIL) (LIST #) (QUOTE #) ...) NIL) NIL :AUX-VARS NIL :AUX-VALS NIL :SOURCE-NAME SB-C::.ANONYMOUS. :D..
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        #:.DEFAULTING-TEMP.#1 = NIL
        BIND = #<SB-KERNEL:BIND :LAMBDA #<SB-C::CLAMBDA :%SOURCE-NAME SB-C::.ANONYMOUS. :%DEBUG-NAME "top level form" :KIND # :TYPE # :WHERE-FROM :DEFINED :VARS NIL {1020D80793}>>
        DEBUG-NAME = "top level form"
        #:G = ((SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...) NIL)
        #:G#1 = NIL
        #:G#2 = NIL
        LAMBDA = #<SB-C::CLAMBDA :%SOURCE-NAME SB-C::.ANONYMOUS. :%DEBUG-NAME "top level form" :KIND (NIL) :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)> :WHERE-FROM :DEFINED :VARS NIL {1020D80793}>
        LOCAL-POLICY = NIL
        NOTE-LEXICAL-BINDINGS = T
        SOURCE-NAME = SB-C::.ANONYMOUS.
        VARS = NIL
 79: (SB-C::IR1-TOPLEVEL (SB-PCL::LOAD-DEFMETHOD (QUOTE STANDARD-METHOD) (QUOTE DONEP) (QUOTE NIL) (LIST (FIND-CLASS #)) (QUOTE (ITERATOR)) ...) ((SB-PCL::LOAD-DEFMETHOD (QUOTE STANDARD-METHOD) (QUOTE DONE..
      Locals:
        .ANONYMOUS. = ((SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...) ..)
        .ANONYMOUS.#1 = T
        FOR-VALUE = NIL
        FORM = (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...)
 80: (SB-C::CONVERT-AND-MAYBE-COMPILE (SB-PCL::LOAD-DEFMETHOD (QUOTE STANDARD-METHOD) (QUOTE DONEP) (QUOTE NIL) (LIST (FIND-CLASS #)) (QUOTE (ITERATOR)) ...) ((SB-PCL::LOAD-DEFMETHOD (QUOTE STANDARD-METHOD..
      Locals:
        FORM = (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...)
        PATH = ((SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...) ..)
 81: (SB-C::PROCESS-TOPLEVEL-FORM (SB-PCL::LOAD-DEFMETHOD (QUOTE STANDARD-METHOD) (QUOTE DONEP) (QUOTE NIL) (LIST (FIND-CLASS #)) (QUOTE (ITERATOR)) ...) (#1=(SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL (#) (#))..
      Locals:
        COMPILE-TIME-TOO = NIL
        FORM = (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'DONEP 'NIL (LIST (FIND-CLASS 'NESTED-VECTOR-ITERATOR)) '(ITERATOR) ...)
        PATH = ((SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL ((ITERATOR NESTED-VECTOR-ITERATOR)) ((AND # #))) (EVAL-WHEN (:LOAD-TOPLEVEL) (SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL (#) (#))) ..)
      Catch-tags:
        SB-C::PROCESS-TOPLEVEL-FORM-ERROR-ABORT
 82: (SB-C::PROCESS-TOPLEVEL-FORM (SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL ((ITERATOR NESTED-VECTOR-ITERATOR)) ((AND # #))) (#1=(EVAL-WHEN (:LOAD-TOPLEVEL) (SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL # #)) (PROGN..
      Locals:
        COMPILE-TIME-TOO = NIL
        FORM = (SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL ((ITERATOR NESTED-VECTOR-ITERATOR)) ((AND (ZEROP #) (CURRENT-DEPTH-DONE-P ITERATOR))))
        PATH = ((EVAL-WHEN (:LOAD-TOPLEVEL) (SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL (#) (#))) ..)
      Catch-tags:
        SB-C::PROCESS-TOPLEVEL-FORM-ERROR-ABORT
 83: (SB-C::PROCESS-TOPLEVEL-PROGN ((SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL (#) (#))) (#1=(EVAL-WHEN (:LOAD-TOPLEVEL) (SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL # #)) (PROGN (EVAL-WHEN # #) #1# (EVAL-WHEN # #))..
      Locals:
        COMPILE-TIME-TOO = NIL
        FORMS = ((SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL ((ITERATOR NESTED-VECTOR-ITERATOR)) ((AND # #))))
        PATH = ((EVAL-WHEN (:LOAD-TOPLEVEL) (SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL (#) (#))) ..)
 84: (SB-C::PROCESS-TOPLEVEL-FORM (EVAL-WHEN (:LOAD-TOPLEVEL) (SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL (#) (#))) ((PROGN (EVAL-WHEN # #) (EVAL-WHEN # #) (EVAL-WHEN # #)) SB-C::ORIGINAL-SOURCE-START 0 37) NIL..
      Locals:
        COMPILE-TIME-TOO = NIL
        FORM = (EVAL-WHEN (:LOAD-TOPLEVEL) (SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL ((ITERATOR NESTED-VECTOR-ITERATOR)) ((AND # #))))
        PATH = ((PROGN ..))
      Catch-tags:
        SB-C::PROCESS-TOPLEVEL-FORM-ERROR-ABORT
 85: (SB-C::PROCESS-TOPLEVEL-PROGN ((EVAL-WHEN (:COMPILE-TOPLEVEL . #1=#) (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC #)) (EVAL-WHEN (:LOAD-TOPLEVEL) (SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL #2=# #3=#)) (EVAL-WHEN #..
      Locals:
        COMPILE-TIME-TOO = NIL
        FORMS = ((EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'DONEP)) (EVAL-WHEN (:LOAD-TOPLEVEL) (SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL (#) (#))) ..)
        PATH = ((PROGN ..))
 86: (SB-C::PROCESS-TOPLEVEL-FORM (PROGN (EVAL-WHEN (:COMPILE-TOPLEVEL . #1=#) (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC #)) (EVAL-WHEN (:LOAD-TOPLEVEL) (SB-PCL::%DEFMETHOD-EXPANDER DONEP NIL #2=# #3=#)) (EVAL-W..
      Locals:
        COMPILE-TIME-TOO = NIL
        FORM = (PROGN ..)
        PATH = (SB-C::ORIGINAL-SOURCE-START 0 37)
      Catch-tags:
        SB-C::PROCESS-TOPLEVEL-FORM-ERROR-ABORT
 87: (SB-C::PROCESS-TOPLEVEL-FORM (DEFMETHOD DONEP ((ITERATOR NESTED-VECTOR-ITERATOR)) (AND (ZEROP #) (CURRENT-DEPTH-DONE-P ITERATOR))) (SB-C::ORIGINAL-SOURCE-START 0 37) NIL)
      Locals:
        COMPILE-TIME-TOO = NIL
        FORM = (DEFMETHOD DONEP ((ITERATOR NESTED-VECTOR-ITERATOR)) (AND (ZEROP (DEPTH ITERATOR)) (CURRENT-DEPTH-DONE-P ITERATOR)))
        PATH = (SB-C::ORIGINAL-SOURCE-START 0 37)
      Catch-tags:
        SB-C::PROCESS-TOPLEVEL-FORM-ERROR-ABORT
 88: ((LAMBDA (SB-KERNEL:FORM &KEY :CURRENT-INDEX &ALLOW-OTHER-KEYS) :IN SB-C::SUB-COMPILE-FILE) (DEFMETHOD DONEP ((ITERATOR NESTED-VECTOR-ITERATOR)) (AND (ZEROP #) (CURRENT-DEPTH-DONE-P ITERATOR))) :CURRE..
      Locals:
        #:.DEFAULTING-TEMP. = 37
        SB-KERNEL:FORM = (DEFMETHOD DONEP ((ITERATOR NESTED-VECTOR-ITERATOR)) (AND (ZEROP (DEPTH ITERATOR)) (CURRENT-DEPTH-DONE-P ITERATOR)))
 89: (SB-C::%DO-FORMS-FROM-INFO #<FUNCTION (LAMBDA (SB-KERNEL:FORM &KEY :CURRENT-INDEX &ALLOW-OTHER-KEYS) :IN SB-C::SUB-COMPILE-FILE) {B8002FBE7B}> #<SB-C::SOURCE-INFO {101FDC0653}> SB-C::INPUT-ERROR-IN-CO..
      Locals:
        CONDITION-NAME = SB-C::INPUT-ERROR-IN-COMPILE-FILE
        FUNCTION = #<FUNCTION (LAMBDA (SB-KERNEL:FORM &KEY :CURRENT-INDEX &ALLOW-OTHER-KEYS) :IN SB-C::SUB-COMPILE-FILE) {B8002FBE7B}>
        INFO = #<SB-C::SOURCE-INFO {101FDC0653}>
        POS = 8912
        STREAM = #<SB-INT:FORM-TRACKING-STREAM for "file /home/fstamour/dev/breeze/src/iterator.lisp" {101FDBE993}>
 90: ((LAMBDA NIL :IN SB-C::SUB-COMPILE-FILE))
      [No Locals]
 91: ((FLET SB-C::WITH-IT :IN SB-C::%WITH-COMPILATION-UNIT))
      Locals:
        SUCCEEDED-P = NIL
 92: (SB-C::SUB-COMPILE-FILE #<SB-C::SOURCE-INFO {101FDC0653}> NIL)
      Locals:
        CFASL = NIL
        INFO = #<SB-C::SOURCE-INFO {101FDC0653}>
 93: (COMPILE-FILE #P"/home/fstamour/dev/breeze/src/iterator.lisp" :OUTPUT-FILE #P"/home/fstamour/dev/breeze/src/iterator.fasl" :VERBOSE NIL :PRINT NIL :EXTERNAL-FORMAT :DEFAULT :PROGRESS NIL :TRACE-FILE N..
      Locals:
        #:.DEFAULTING-TEMP. = #P"/home/fstamour/dev/breeze/src/iterator.fasl"
        #:.DEFAULTING-TEMP.#1 = NIL
        #:.DEFAULTING-TEMP.#2 = NIL
        #:.DEFAULTING-TEMP.#3 = :DEFAULT
        #:.DEFAULTING-TEMP.#4 = NIL
        #:.DEFAULTING-TEMP.#5 = NIL
        #:.DEFAULTING-TEMP.#6 = NIL
        #:.DEFAULTING-TEMP.#7 = NIL
        #:.DEFAULTING-TEMP.#8 = NIL
        SB-C::ABORT-P = T
        SB-C::CFASL-OUTPUT = NIL
        SB-C::CFASL-PATHNAME = NIL
        SB-C::FASL-OUTPUT = #<SB-C::FASL-OUTPUT "/home/fstamour/dev/breeze/src/iterator.fasl">
        SB-C::INPUT-FILE = #P"/home/fstamour/dev/breeze/src/iterator.lisp"
        #:N-SUPPLIED- = 0
        #:N-SUPPLIED-#1 = 0
        #:N-SUPPLIED-#2 = 0
        #:N-SUPPLIED-#3 = 0
        #:N-SUPPLIED-#4 = 0
        SB-C::OUTPUT-FILE-P = T
        SB-C::OUTPUT-FILE-PATHNAME = #P"/home/fstamour/dev/breeze/src/iterator.fasl"
        SB-C::SOURCE-INFO = #<SB-C::SOURCE-INFO {101FDC0653}>
        SB-C::START-NSEC = 492984
        SB-C::START-SEC = 0
 94: ((FLET SWANK/BACKEND:CALL-WITH-COMPILATION-HOOKS :IN "/home/fstamour/quicklisp/dists/quicklisp/software/slime-v2.30/swank/sbcl.lisp") #<FUNCTION (LAMBDA NIL :IN SWANK/BACKEND:SWANK-COMPILE-FILE) {101F..
      Locals:
        SB-C::THING = #<FUNCTION (LAMBDA () :IN SWANK/BACKEND:SWANK-COMPILE-FILE) {101FDBC1AB}>
 95: (SWANK/BACKEND:CALL-WITH-COMPILATION-HOOKS #<FUNCTION (LAMBDA NIL :IN SWANK/BACKEND:SWANK-COMPILE-FILE) {101FDBC1AB}>)
      Locals:
        F = #<FUNCTION (FLET SWANK/BACKEND:CALL-WITH-COMPILATION-HOOKS :IN "/home/fstamour/quicklisp/dists/quicklisp/software/slime-v2.30/swank/sbcl.lisp") {B800C318FB}>
        FUNC = #<FUNCTION (LAMBDA () :IN SWANK/BACKEND:SWANK-COMPILE-FILE) {101FDBC1AB}>
        #:G5 = #<FUNCTION (LAMBDA () :IN SWANK/BACKEND:SWANK-COMPILE-FILE) {101FDBC1AB}>
        #:G5#1 = #<FUNCTION (LAMBDA () :IN SWANK/BACKEND:SWANK-COMPILE-FILE) {101FDBC1AB}>
 96: ((FLET SWANK/BACKEND:SWANK-COMPILE-FILE :IN "/home/fstamour/quicklisp/dists/quicklisp/software/slime-v2.30/swank/sbcl.lisp") #P"/home/fstamour/dev/breeze/src/iterator.lisp" #P"/home/fstamour/dev/breez..
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        SWANK/SBCL::EXTERNAL-FORMAT = :DEFAULT
        #:G4 = NIL
        SWANK/SBCL::INPUT-FILE = #P"/home/fstamour/dev/breeze/src/iterator.lisp"
        SWANK/SBCL::LOAD-P = NIL
        SWANK/SBCL::OUTPUT-FILE = #P"/home/fstamour/dev/breeze/src/iterator.fasl"
        SWANK/SBCL::POLICY = NIL
 97: (SWANK/BACKEND:SWANK-COMPILE-FILE #P"/home/fstamour/dev/breeze/src/iterator.lisp" #P"/home/fstamour/dev/breeze/src/iterator.fasl" NIL :DEFAULT :POLICY NIL)
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        EXTERNAL-FORMAT = :DEFAULT
        F = #<FUNCTION (FLET SWANK/BACKEND:SWANK-COMPILE-FILE :IN "/home/fstamour/quicklisp/dists/quicklisp/software/slime-v2.30/swank/sbcl.lisp") {B800C323EB}>
        #:G28 = #P"/home/fstamour/dev/breeze/src/iterator.lisp"
        #:G28#1 = #P"/home/fstamour/dev/breeze/src/iterator.lisp"
        #:G29 = #P"/home/fstamour/dev/breeze/src/iterator.fasl"
        #:G29#1 = #P"/home/fstamour/dev/breeze/src/iterator.fasl"
        #:G30 = NIL
        #:G30#1 = NIL
        #:G31 = :DEFAULT
        #:G31#1 = :DEFAULT
        #:G33 = NIL
        #:G33#1 = NIL
        INPUT-FILE = #P"/home/fstamour/dev/breeze/src/iterator.lisp"
        LOAD-P = NIL
        OUTPUT-FILE = #P"/home/fstamour/dev/breeze/src/iterator.fasl"
        POLICY = NIL
 98: (SWANK::SWANK-COMPILE-FILE* #P"/home/fstamour/dev/breeze/src/iterator.lisp" T)
      Locals:
        #:.DEFAULTING-TEMP. = NIL
        LOAD-P = T
        OPTIONS = NIL
        PATHNAME = #P"/home/fstamour/dev/breeze/src/iterator.lisp"
        POLICY = NIL
 99: ((LAMBDA NIL :IN SWANK:COMPILE-FILE-FOR-EMACS))
      Locals:
        SWANK::FILENAME = "/home/fstamour/dev/breeze/src/iterator.lisp"
        SB-C::L = NIL
        SWANK::LOAD-P = T
 100: ((LAMBDA NIL :IN SWANK::COLLECT-NOTES))
      Locals:
        FUNCTION = #<FUNCTION (LAMBDA () :IN SWANK:COMPILE-FILE-FOR-EMACS) {101FDB836B}>
 101: (SWANK::MEASURE-TIME-INTERVAL #<FUNCTION (LAMBDA NIL :IN SWANK::COLLECT-NOTES) {101FDB839B}>)
      Locals:
        BEFORE = 998835185
        SB-C::THING = #<FUNCTION (LAMBDA () :IN SWANK::COLLECT-NOTES) {101FDB839B}>
 102: (SWANK::COLLECT-NOTES #<FUNCTION (LAMBDA NIL :IN SWANK:COMPILE-FILE-FOR-EMACS) {101FDB836B}>)
      Locals:
        FUNCTION = #<FUNCTION (LAMBDA () :IN SWANK:COMPILE-FILE-FOR-EMACS) {101FDB836B}>
        NOTES = ((:MESSAGE ..))
 103: ((LAMBDA NIL :IN SWANK:COMPILE-FILE-FOR-EMACS))
      Locals:
        SWANK::FILENAME = "/home/fstamour/dev/breeze/src/iterator.lisp"
        SB-C::L = NIL
        SWANK::LOAD-P = T
 104: (SWANK/BACKEND:CALL-WITH-SYNTAX-HOOKS #<FUNCTION (LAMBDA NIL :IN SWANK:COMPILE-FILE-FOR-EMACS) {101FDB833B}>)
      Locals:
        F = #<FUNCTION (FLET SWANK/BACKEND:CALL-WITH-SYNTAX-HOOKS :IN "/home/fstamour/quicklisp/dists/quicklisp/software/slime-v2.30/swank/sbcl.lisp") {B800C2EBFB}>
        FN = #<FUNCTION (LAMBDA () :IN SWANK:COMPILE-FILE-FOR-EMACS) {101FDB833B}>
        #:G5 = #<FUNCTION (LAMBDA () :IN SWANK:COMPILE-FILE-FOR-EMACS) {101FDB833B}>
        #:G5#1 = #<FUNCTION (LAMBDA () :IN SWANK:COMPILE-FILE-FOR-EMACS) {101FDB833B}>
 105: (SWANK::CALL-WITH-BUFFER-SYNTAX NIL #<FUNCTION (LAMBDA NIL :IN SWANK:COMPILE-FILE-FOR-EMACS) {101FDB833B}>)
      Locals:
        FUN = #<FUNCTION (LAMBDA () :IN SWANK:COMPILE-FILE-FOR-EMACS) {101FDB833B}>
        PACKAGE = NIL
 106: (SWANK:COMPILE-FILE-FOR-EMACS "/home/fstamour/dev/breeze/src/iterator.lisp" T)
      Locals:
        FILENAME = "/home/fstamour/dev/breeze/src/iterator.lisp"
        SB-C::L = NIL
        LOAD-P = T
 107: (SB-INT:SIMPLE-EVAL-IN-LEXENV (SWANK:COMPILE-FILE-FOR-EMACS "/home/fstamour/dev/breeze/src/iterator.lisp" T) #<NULL-LEXENV>)
      Locals:
        SB-KERNEL:LEXENV = #<NULL-LEXENV>
        SB-IMPL::ORIGINAL-EXP = (SWANK:COMPILE-FILE-FOR-EMACS "/home/fstamour/dev/breeze/src/iterator.lisp" T)
 108: (EVAL (SWANK:COMPILE-FILE-FOR-EMACS "/home/fstamour/dev/breeze/src/iterator.lisp" T))
      Locals:
        SB-IMPL::ORIGINAL-EXP = (SWANK:COMPILE-FILE-FOR-EMACS "/home/fstamour/dev/breeze/src/iterator.lisp" T)
 109: (SWANK:EVAL-FOR-EMACS (SWANK:COMPILE-FILE-FOR-EMACS "/home/fstamour/dev/breeze/src/iterator.lisp" T) "#:breeze.iterator" 198)
      Locals:
        BUFFER-PACKAGE = "#:breeze.iterator"
        CONDITION = #<SB-INT:BUG "~@<failed AVER: ~2I~_~A~:>" {1020ED0E93}>
        FORM = (SWANK:COMPILE-FILE-FOR-EMACS "/home/fstamour/dev/breeze/src/iterator.lisp" T)
        ID = 198
        OK = NIL
        RESULT = NIL
 110: ((LAMBDA NIL :IN SWANK::SPAWN-WORKER-THREAD))
      Locals:
        #:G18 = NIL
 111: (SWANK/SBCL::CALL-WITH-BREAK-HOOK #<FUNCTION SWANK:SWANK-DEBUGGER-HOOK> #<FUNCTION (LAMBDA NIL :IN SWANK::SPAWN-WORKER-THREAD) {B800C6747B}>)
      Locals:
        CONTINUATION = #<FUNCTION (LAMBDA () :IN SWANK::SPAWN-WORKER-THREAD) {B800C6747B}>
        HOOK = #<FUNCTION SWANK:SWANK-DEBUGGER-HOOK>
 112: ((FLET SWANK/BACKEND:CALL-WITH-DEBUGGER-HOOK :IN "/home/fstamour/quicklisp/dists/quicklisp/software/slime-v2.30/swank/sbcl.lisp") #<FUNCTION SWANK:SWANK-DEBUGGER-HOOK> #<FUNCTION (LAMBDA NIL :IN SWANK..
      Locals:
        SWANK/SBCL::FUN = #<FUNCTION (LAMBDA () :IN SWANK::SPAWN-WORKER-THREAD) {B800C6747B}>
        SWANK/SBCL::HOOK = #<FUNCTION SWANK:SWANK-DEBUGGER-HOOK>
 113: (SWANK/BACKEND:CALL-WITH-DEBUGGER-HOOK #<FUNCTION SWANK:SWANK-DEBUGGER-HOOK> #<FUNCTION (LAMBDA NIL :IN SWANK::SPAWN-WORKER-THREAD) {B800C6747B}>)
      Locals:
        F = #<FUNCTION (FLET SWANK/BACKEND:CALL-WITH-DEBUGGER-HOOK :IN "/home/fstamour/quicklisp/dists/quicklisp/software/slime-v2.30/swank/sbcl.lisp") {B800C3A9EB}>
        FUN = #<FUNCTION (LAMBDA () :IN SWANK::SPAWN-WORKER-THREAD) {B800C6747B}>
        #:G7 = #<FUNCTION SWANK:SWANK-DEBUGGER-HOOK>
        #:G7#1 = #<FUNCTION SWANK:SWANK-DEBUGGER-HOOK>
        #:G8 = #<FUNCTION (LAMBDA () :IN SWANK::SPAWN-WORKER-THREAD) {B800C6747B}>
        #:G8#1 = #<FUNCTION (LAMBDA () :IN SWANK::SPAWN-WORKER-THREAD) {B800C6747B}>
        HOOK = #<FUNCTION SWANK:SWANK-DEBUGGER-HOOK>
 114: ((LAMBDA NIL :IN SWANK::SPAWN-WORKER-THREAD))
      [No Locals]
 115: (SWANK::CALL-WITH-BINDINGS ((*STANDARD-INPUT* . #<SWANK/GRAY::SLIME-INPUT-STREAM {100BC55C93}>)) #<FUNCTION (LAMBDA NIL :IN SWANK::SPAWN-WORKER-THREAD) {B800C67B1B}>)
      Locals:
        ALIST = ((*STANDARD-INPUT* . #<SWANK/GRAY::SLIME-INPUT-STREAM {100BC55C93}>))
        FUN = #<FUNCTION (LAMBDA () :IN SWANK::SPAWN-WORKER-THREAD) {B800C67B1B}>
        #:N-SAVE-BS2 = 70094661664888
        RLIST = ((*STANDARD-INPUT* . #<SWANK/GRAY::SLIME-INPUT-STREAM {100BC55C93}>))
        VALS = (#<SWANK/GRAY::SLIME-INPUT-STREAM {100BC55C93}>)
        VARS = (*STANDARD-INPUT*)
 116: ((LAMBDA NIL :IN SWANK::SPAWN-WORKER-THREAD))
      Locals:
        SWANK::CONNECTION = #<SWANK::MULTITHREADED-CONNECTION {100A8BC1A3}>
        SWANK::CONNECTION#1 = #<SWANK::MULTITHREADED-CONNECTION {100A8BC1A3}>
        #:G0 = #<SWANK::MULTITHREADED-CONNECTION {100A8BC1A3}>
 117: (SWANK::CALL-WITH-BINDINGS NIL #<FUNCTION (LAMBDA NIL :IN SWANK::SPAWN-WORKER-THREAD) {101FC47FAB}>)
      Locals:
        ALIST = NIL
        FUN = #<FUNCTION (LAMBDA () :IN SWANK::SPAWN-WORKER-THREAD) {101FC47FAB}>
 118: ((LAMBDA NIL :IN SWANK::SPAWN-WORKER-THREAD))
      Locals:
        SWANK::CONNECTION = #<SWANK::MULTITHREADED-CONNECTION {100A8BC1A3}>
 119: ((FLET SB-UNIX::BODY :IN SB-THREAD::RUN))
      [No Locals]
      Catch-tags:
        SB-THREAD::%RETURN-FROM-THREAD
 120: ((FLET "WITHOUT-INTERRUPTS-BODY-" :IN SB-THREAD::RUN))
      [No Locals]
 121: ((FLET SB-UNIX::BODY :IN SB-THREAD::RUN))
      [No Locals]
      Catch-tags:
        SB-THREAD::%ABORT-THREAD
        SB-IMPL::%END-OF-THE-WORLD
        SB-INT:TOPLEVEL-CATCHER
 122: ((FLET "WITHOUT-INTERRUPTS-BODY-" :IN SB-THREAD::RUN))
      [No Locals]
 123: (SB-THREAD::RUN)
      [No Locals]
 124: ("foreign function: call_into_lisp_")
      [No Locals]
 125: ("foreign function: funcall1")
      [No Locals]
