:PROPERTIES:
:ID:       d08ab932-1204-4e7c-9869-40fc53500071
:END:
#+title: Introduction

* What is this?

This is a git repository that contains lots of common lisp code that I
use to make developing with common lisp easier. It is a personal
project that I work on from time to time, but that I use (and break)
pretty much all the time.

* Features

- Emacs integration
- Integration with quickproject
- Context-aware, configurable snippets and refactorings
- Command for quick code capture (trying out code in a new file)
- Implemented in common lisp to be able to port it to other editors in
  the future

Currently, breeze's main interface is emacs; =breeze.el= adds a few
commands and one minor-mode with one bindings (~C-.~).

The one binding calls a command named ~breeze-quickfix~ (might rename
in the future). This command suggests applicable actions given the
current context (file name, file content, position in the file,
etc.). For example, if the file ends with ".asd" it will suggest a
command to insert a ~defsystem~ form. If breeze was already
configured, it will pre-fill the ~:maintainer~, ~:author~ and
~:licence~ fields. Another example is that if the file is empty, or
contains only comments, it will suggest to insert a ~defpackage~ or
~uiop:define-package~ form. It is also able to detect when you're
trying to edit/evaluate forms that are in a package that doesn't
exists (=did you forget to evaluate the ~defpackage~ form?=).

The integration with quickproject is pretty simple and let's you
quickly create new projects from the comfort of your editor. The
integration consists of one command that asks you for some
information, like the project name and licence. It takes some default
values from breeze's configuration, but let's you change them. All
this to ease the use of quickproject.

Another simple command that helps me is ~breeze-capture~, it creates a
new file in a pre-determined (must be configured) folder and fills it
with some pre-configured content (template) and let's you code right
away. This could've easily be done in emacs (that's how I prototyped
the first version), but doing this in common lisp makes it easy to
port it to other editors (or just the repl) in the future.

I must stress that this whole project is in constant flux, and until I
add more and more tests, stuff might break any time.

* Next

[[id:306350c9-0fb5-478b-958b-b35cae726280][Getting Started]]
