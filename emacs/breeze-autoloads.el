;;; breeze-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from breeze.el

(autoload 'breeze-init "breeze" "\
Initialize breeze.

(fn)" t)
(autoload 'breeze-minor-mode "breeze" "\
Toggle Breeze minor mode on or off

Breeze minor mode is an Emacs minor mode that complements lisp-mode.

This is a minor mode.  If called interactively, toggle the `Breeze minor
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `breeze-minor-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" '(lisp-mode))
(autoload 'enable-breeze-minor-mode "breeze" "\
Enable breeze-minor-mode." t)
(autoload 'disable-breeze-minor-mode "breeze" "\
Disable breeze-minor-mode." t)
(autoload 'breeze-major-mode "breeze" "\


(fn)" t)
(autoload 'breeze--defstub "breeze" "\
Macro to define a stub function for the command NAME.

(fn NAME DOCSTRING)" nil t)
(breeze--defstub breeze-completions-at-point "completion-at-point")
(breeze--defstub breeze-insert-defvar "Insert a defvar form.")
(breeze--defstub breeze-interactive-eval "A command to interactively evaluate code.")
(breeze--defstub breeze-insert-loop-clause-for-on-list "Insert a loop clause to iterate on a list.")
(breeze--defstub breeze-insert-handler-case-form "Insert handler case form.")
(breeze--defstub breeze-insert-setf-defun "Insert a setf function form e.g. (defun (setf ...) ...)")
(breeze--defstub breeze-insert-handler-bind-form "Insert handler bind form.")
(breeze--defstub breeze-insert-loop-clause-for-hash "Insert a loop clause to iterate on a hash-table.")
(breeze--defstub breeze-insert-defgeneric "Insert a defgeneric form.")
(breeze--defstub breeze-capture "Quickly create a lisp file in a pre-determined directory.")
(breeze--defstub breeze-insert-print-unreadable-object-boilerplate "Insert a print-object method form.")
(breeze--defstub breeze-kill-worker-threads "Find threads named \"worker\", then destroy them.")
(breeze--defstub breeze-insert-local-nicknames "Insert local nicknames.")
(breeze--defstub breeze-insert-make-load-form-boilerplate "Insert a make-load-form method form.")
(breeze--defstub breeze-insert-defpackage "Insert a defpackage form.")
(breeze--defstub breeze-quickfix "Given the context, suggest some applicable commands.")
(breeze--defstub breeze-insert-loop-clause-for-in-list "Insert a loop clause to iterate in a list.")
(breeze--defstub breeze-insert-defclass "Insert a defclass form.")
(breeze--defstub breeze-insert-defparameter "Insert a defparameter form.")
(breeze--defstub breeze-insert-asdf "Insert an asdf system definition form.")
(breeze--defstub breeze-insert-in-package-cl-user "Insert (cl:in-package #:cl-user)")
(breeze--defstub breeze-insert-lambda "Insert a lambda form.")
(breeze--defstub breeze-quickproject "Create a project interactively using quickproject.")
(breeze--defstub breeze-insert-defun "Insert a defun form.")
(breeze--defstub breeze-kill-sexp "Kill the expression following point.")
(breeze--defstub breeze-insert-defconstant "Insert a defconstant form.")
(breeze--defstub breeze-insert-class-slot "Insert a defclass slot form.")
(breeze--defstub breeze-insert-breeze-define "Insert a breeze:define-command form.")
(breeze--defstub breeze-insert-define-constant "Insert a alexandria:define-constant form.")
(breeze--defstub breeze-insert-defmethod "Insert a defmethod form.")
(breeze--defstub breeze-insert-defmacro "Insert a defmacro form.")
(register-definition-prefixes "breeze" '("breeze-"))


;;; End of scraped data

(provide 'breeze-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; breeze-autoloads.el ends here
