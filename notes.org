#+STARTUP: showeverything

* Tasks
** TODO Advising swank-interactive-eval doesn't override emacs' repl
** TODO Advising swank-interactive-eval doesn't override sbcl's repl either
** TODO Document how to use breeze:defun

*** When redefining a function defined with breeze:defun, it run tests
*** When defining a test with breeze:deftest, it run tests

*** Demonstrate that the test-runner is debounced

When you redefine many function (e.g. when reloading a file), it
doens't run all the tests each time a something is redefined.


** TODO Document (with screenshots) how to setup and use emacs integration
** TODO Document how to use quickproject integration
** TODO Make the file-watcher usable
** TODO Document how to use the file-watcher
** TODO Document how the file-watcher works

* Other projects with slime integration
** log4cl
* Portable file watching
https://www.reddit.com/r/lisp/comments/1iatcd/fswatcher_watches_filesystem_changes/

http://eradman.com/entrproject/

* Random ideas
** (tips), (tips "test"), (tips "doc")
** (next) ;; what's next? print functions that aren't done, that have no tests or documentation.
*** functions that aren't implemented or done
*** functions that have no tests
*** functions that have no documentation
*** Have a plain user-controlled task list
** Evaluate quality of documentation
*** e.g. if the documentation is almost just the name of the function
*** Make sure it doens't "only" refer to another function
*** It's more that the content of the function

(defun print-x (x)
  "print (* x x)"
  (print (* x x))

*** Make sure that all package have a :documentation
*** Make sure that all classes have a :documentation
** Evalutation the quality of the code
*** Cyclomatic complexity
*** Length of variable names
*** linting in general
** Compare the files in a system's directory and the actual components.
** See BIST to probalistically compare functions
*** Use a PRNG to generate inputs, use a hash to fingerprint the outputs
* See
** TODO uses of slime's locative: http://quickdocs.org/mgl-pax/

* Scratch files

* Prior Arts

** Tinker (1980)
http://web.media.mit.edu/%7Elieber/Lieberary/Tinker/Tinker/Tinker.html

** Image Based develoment

[Image based development](https://www.informatimago.com/develop/lisp/com/informatimago/small-cl-pgms/ibcl/index.html)
